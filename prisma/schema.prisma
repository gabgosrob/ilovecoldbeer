datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  addedBeers    Beer[]
  reviews       Review[]
}

model Beer {
  id            String  @id @default(cuid())
  userId        String
  addedBy       User    @relation(fields: [userId], references: [id])
  reviews       Review[]
  name          String
  brewer        String
  style         String
  color         String
  description   String
}

model Review {
  id          String  @id @default(cuid())
  userId      String
  createdBy   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  beerId      String
  beer        Beer    @relation(fields: [beerId], references: [id], onDelete: Cascade)
  comment     String
  score       Int
}
